{"version":3,"file":"static/js/481.37287cfc.chunk.js","mappings":"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","sources":["components/Button/index.tsx","components/Section/index.tsx","hooks/useConditionalTimeout.ts","components/SwapIcon/index.tsx","components/FeedbackGroup/index.tsx","components/ConverterOptgroupItems/index.tsx","components/ConverterSelectItems/index.tsx","types/form.ts","components/ConverterForm/formConfig.ts","errors/converting-error.ts","components/ConverterForm/index.tsx","utils/extractMeasurementUnits.ts","utils/convert.ts","utils/roundBigValue.ts","components/ConverterUnitName/index.tsx","components/Error/index.tsx","components/ConvertingResult/index.tsx","utils/formatConvertingResult.ts","pages/ConverterPage.tsx","pages/VolumePage.tsx"],"sourcesContent":["import { Button as BSButton } from 'react-bootstrap';\r\nimport { PropsWithChildren, ButtonHTMLAttributes } from 'react';\r\nimport './Button.css';\r\n\r\ninterface ButtonProps extends PropsWithChildren, ButtonHTMLAttributes<HTMLButtonElement> {}\r\n\r\nfunction Button({ children, ...props }: ButtonProps) {\r\n  return (\r\n    <BSButton variant=\"outline-primary\" className=\"btn-custom\" {...props}>\r\n      {children}\r\n    </BSButton>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import { PropsWithChildren } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\ninterface SectionProps extends PropsWithChildren {\r\n  name: string;\r\n}\r\n\r\nfunction Section({ name, children }: SectionProps) {\r\n  return (\r\n    <Container as=\"section\" fluid=\"md\" className=\"px-4\">\r\n      <h2 className=\"text-uppercase mb-4 border-bottom border-gray pb-2\">\r\n        {name}\r\n      </h2>\r\n      {children}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","import { useEffect, useRef } from 'react';\r\n\r\ntype Timeout = ReturnType<typeof setTimeout>;\r\n\r\nexport default function useConditionalTimeout(callback: Function, delay: number, condition: boolean) {\r\n    const timeoutRef = useRef<Timeout>();\r\n    const savedCallback = useRef<Function>(callback);\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        if (condition && delay) {\r\n            const timeout = () => savedCallback.current();\r\n            timeoutRef.current = setTimeout(timeout, delay);\r\n            return () => clearTimeout(timeoutRef.current);\r\n        }\r\n    }, [delay, condition]);\r\n\r\n    return timeoutRef;\r\n};","import './SwapIcon.css';\r\nimport { GoSync } from 'react-icons/go';\r\nimport { useState } from 'react';\r\nimport useConditionalTimeout from '../../hooks/useConditionalTimeout';\r\n\r\ninterface SwapIconProps {\r\n  onClick: () => void;\r\n  disabled?: boolean;\r\n}\r\n\r\nfunction SwapIcon({ disabled = false, onClick }: SwapIconProps) {\r\n  const [rotating, setRotating] = useState<boolean>(false);\r\n\r\n  const startRotating = () => setRotating(true);\r\n  const stopRotating = () => setRotating(false);\r\n\r\n  const ICON_ROTATING_DURATION_MS: number = 500;\r\n  const MEASUREMENT_UNITS_SWAP_TIME_MS: number =\r\n    ICON_ROTATING_DURATION_MS * (2 / 3);\r\n\r\n  useConditionalTimeout(stopRotating, ICON_ROTATING_DURATION_MS, rotating);\r\n  useConditionalTimeout(onClick, MEASUREMENT_UNITS_SWAP_TIME_MS, rotating);\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={`swap-button ${rotating ? 'rotate' : ''}`}\r\n      onClick={startRotating}\r\n      disabled={disabled}\r\n    >\r\n      <GoSync size={25} />\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SwapIcon;\r\n","import { cloneElement, ReactElement } from 'react';\r\nimport { Form, FormControlProps, FormSelectProps } from 'react-bootstrap';\r\n\r\ninterface InvalidFeedbackGroupProps {\r\n  children: ReactElement<FormControlProps | FormSelectProps>;\r\n  invalidMessage?: string;\r\n}\r\n\r\nfunction InvalidFeedbackGroup({ children, invalidMessage }: InvalidFeedbackGroupProps) {\r\n  return (\r\n    <Form.Group className=\"feedback-group\">\r\n      {cloneElement(children, { isInvalid: !!invalidMessage })}\r\n      {invalidMessage && (\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {invalidMessage}\r\n        </Form.Control.Feedback>\r\n      )}\r\n    </Form.Group>\r\n  );\r\n}\r\n\r\nexport default InvalidFeedbackGroup;\r\n","import { MeasurementUnit } from '../../types/measurement-unit';\r\n\r\ninterface ConverterOptgroupItemsProps {\r\n  optionList: MeasurementUnit[];\r\n}\r\n\r\nfunction ConverterOptgroupItems({ optionList }: ConverterOptgroupItemsProps) {\r\n  return (\r\n    <>\r\n      {optionList.map(({ id, names }) => (\r\n        <option key={id} value={id}>\r\n          {names.full} {names.short && `(${names.short})`}\r\n        </option>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConverterOptgroupItems;\r\n","import { MeasurementUnitGroup } from '../../types/measurement-unit';\r\nimport ConverterOptgroupItems from '../ConverterOptgroupItems';\r\n\r\ninterface ConverterSelectItemsProps {\r\n  groupsList: MeasurementUnitGroup[];\r\n}\r\n\r\nfunction ConverterSelectItems({ groupsList }: ConverterSelectItemsProps) {\r\n  return (\r\n    <>\r\n      <option value=\"\" disabled>\r\n        Select unit of measurement...\r\n      </option>\r\n      {groupsList.map((group: MeasurementUnitGroup) => (\r\n        <optgroup key={group.name} label={group.name}>\r\n          <ConverterOptgroupItems optionList={group.content} />\r\n        </optgroup>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConverterSelectItems;\r\n","export enum ConverterFormNames {\r\n    AMOUNT = 'amount',\r\n    FROM = 'from',\r\n    TO = 'to'\r\n}\r\n\r\n//treat amount as string to save precision when converting to Big type\r\nexport interface ConverterFormData {\r\n    [ConverterFormNames.AMOUNT]: string;\r\n    [ConverterFormNames.FROM]: string;\r\n    [ConverterFormNames.TO]: string;\r\n}","import { ConverterFormNames } from '../../types/form';\r\nimport { RegisterOptions } from 'react-hook-form';\r\n\r\nexport type RegisterFormItemType = Record<ConverterFormNames, RegisterOptions>;\r\n\r\nconst config: RegisterFormItemType = {\r\n    [ConverterFormNames.AMOUNT]: {\r\n        required: 'Amount field is required!',\r\n        min: {\r\n            value: 0,\r\n            message: 'Amount should be bigger than zero!',\r\n        },\r\n    },\r\n    [ConverterFormNames.FROM]: {\r\n        required: 'From unit of measurement should be selected!',\r\n    },\r\n    [ConverterFormNames.TO]: {\r\n        validate: {\r\n            equalFromAndTo: (toValue: any, formValues: any) =>\r\n                toValue !== formValues.from ||\r\n                'From and to values should not be equal!',\r\n        },\r\n    }\r\n};\r\n\r\nexport default config;","export default class ConvertingError extends Error {\r\n    public readonly message: string;\r\n\r\n    constructor(message: string) {\r\n        super();\r\n        this.message = message;\r\n    }\r\n\r\n    static MeasurementUnitNotFound(message: string) {\r\n        return new ConvertingError(message);\r\n    }\r\n}","import './ConverterForm.css';\r\nimport { Form } from 'react-bootstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useConvertingResult } from '../../context/ConvertingResultContext';\r\nimport SwapIcon from '../SwapIcon';\r\nimport InvalidFeedbackGroup from '../FeedbackGroup';\r\nimport ConverterSelectItems from '../ConverterSelectItems';\r\nimport Button from '../Button';\r\nimport formConfig from './formConfig';\r\nimport { ConverterFormNames, ConverterFormData } from '../../types/form';\r\nimport { ConverterResponse } from '../../types/measurement-unit';\r\nimport convert from '../../utils/convert';\r\nimport extractMeasurementUnits, {\r\n  ExtractMeasurementUnitsReturnType,\r\n} from '../../utils/extractMeasurementUnits';\r\n\r\ninterface ConverterFormProps {\r\n  converterData: ConverterResponse;\r\n}\r\n\r\nfunction ConverterForm({ converterData }: ConverterFormProps) {\r\n  const defaultValues = {\r\n    [ConverterFormNames.FROM]: '',\r\n    [ConverterFormNames.TO]: '',\r\n  };\r\n\r\n  const { setResult } = useConvertingResult();\r\n  const {\r\n    register,\r\n    handleSubmit: submitHandlerWrapper,\r\n    setValue,\r\n    watch,\r\n    formState: { errors },\r\n  } = useForm<ConverterFormData>({ defaultValues });\r\n\r\n  const { type, groups } = converterData;\r\n\r\n  const amountInputRegister = register(\r\n    ConverterFormNames.AMOUNT,\r\n    formConfig[ConverterFormNames.AMOUNT]\r\n  );\r\n\r\n  const fromSelectRegister = register(\r\n    ConverterFormNames.FROM,\r\n    formConfig[ConverterFormNames.FROM]\r\n  );\r\n\r\n  const toSelectRegister = register(\r\n    ConverterFormNames.TO,\r\n    formConfig[ConverterFormNames.TO]\r\n  );\r\n\r\n  const from = watch(ConverterFormNames.FROM);\r\n  const to = watch(ConverterFormNames.TO);\r\n\r\n  const swapValues = () => {\r\n    setValue(ConverterFormNames.FROM, to);\r\n    setValue(ConverterFormNames.TO, from);\r\n  };\r\n\r\n  const swapDisabled = from === to || !Boolean(from) || !Boolean(to);\r\n\r\n  const submitHandler = submitHandlerWrapper((data: ConverterFormData) => {\r\n    const extractedData: ExtractMeasurementUnitsReturnType =\r\n      extractMeasurementUnits(groups, data);\r\n    const result = convert(extractedData);\r\n    setResult(result);\r\n  });\r\n\r\n  return (\r\n    <Form onSubmit={submitHandler} className=\"converter-form\">\r\n      <Form.Group className=\"form-group\">\r\n        <Form.Text>Convert {type} from: </Form.Text>\r\n        <InvalidFeedbackGroup\r\n          invalidMessage={errors[ConverterFormNames.AMOUNT]?.message}\r\n        >\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder={`Enter ${type}...`}\r\n            autoComplete=\"off\"\r\n            step=\"any\"\r\n            {...amountInputRegister}\r\n          />\r\n        </InvalidFeedbackGroup>\r\n        <InvalidFeedbackGroup\r\n          invalidMessage={errors[ConverterFormNames.FROM]?.message}\r\n        >\r\n          <Form.Select {...fromSelectRegister}>\r\n            <ConverterSelectItems groupsList={groups} />\r\n          </Form.Select>\r\n        </InvalidFeedbackGroup>\r\n      </Form.Group>\r\n      <Form.Group className=\"form-group\">\r\n        <Form.Text className=\"d-flex justify-content-between align-items-center\">\r\n          to:\r\n          <SwapIcon onClick={swapValues} disabled={swapDisabled} />\r\n        </Form.Text>\r\n        <Form.Group className=\"feedback-group\">\r\n          <InvalidFeedbackGroup\r\n            invalidMessage={errors[ConverterFormNames.TO]?.message}\r\n          >\r\n            <Form.Select {...toSelectRegister}>\r\n              <ConverterSelectItems groupsList={groups} />\r\n            </Form.Select>\r\n          </InvalidFeedbackGroup>\r\n        </Form.Group>\r\n      </Form.Group>\r\n      <Button type=\"submit\">Convert</Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default ConverterForm;\r\n","import { ConverterFormData } from \"../types/form\";\r\nimport { MeasurementUnit, MeasurementUnitGroup } from \"../types/measurement-unit\";\r\n\r\nexport interface ExtractMeasurementUnitsReturnType {\r\n    amount: string,\r\n    fromUnit?: MeasurementUnit,\r\n    toUnit?: MeasurementUnit\r\n}\r\n\r\nexport default function extractMeasurementUnits(\r\n    groups: MeasurementUnitGroup[],\r\n    formData: ConverterFormData\r\n): ExtractMeasurementUnitsReturnType {\r\n    const { amount, from: fromId, to: toId } = formData;\r\n    const measurementUnits: MeasurementUnit[] = groups.reduce(\r\n        (result: MeasurementUnit[], group: MeasurementUnitGroup) => [...result, ...group.content], []\r\n    );\r\n    const fromUnit: MeasurementUnit | undefined = measurementUnits.find(unit => unit.id === fromId);\r\n    const toUnit: MeasurementUnit | undefined = measurementUnits.find(unit => unit.id === toId);\r\n\r\n    return { amount, fromUnit, toUnit };\r\n}","import { Big } from 'big.js';\r\nimport { ExtractMeasurementUnitsReturnType } from './extractMeasurementUnits';\r\nimport { ConvertingResult } from \"../types/converting-result\";\r\nimport ConvertingError from '../errors/converting-error';\r\n\r\nexport default function convert(extractedData: ExtractMeasurementUnitsReturnType): ConvertingResult {\r\n    const { amount, fromUnit, toUnit } = extractedData;\r\n\r\n    if (!fromUnit) {\r\n        return ConvertingError.MeasurementUnitNotFound('From unit was not found!');\r\n    }\r\n\r\n    if (!toUnit) {\r\n        return ConvertingError.MeasurementUnitNotFound('To unit was not found!');\r\n    }\r\n\r\n    const bigAmount: Big = new Big(amount);\r\n    const convertingCoefficient: Big = new Big(1).div(fromUnit.value);\r\n    const convertedFromAmount: Big = convertingCoefficient.times(bigAmount);\r\n    const convertedToAmount: Big = convertedFromAmount.times(toUnit.value);\r\n\r\n    return {\r\n        value: convertedToAmount,\r\n        names: toUnit.names,\r\n        from: {\r\n            amount: bigAmount,\r\n            names: fromUnit.names\r\n        }\r\n    };\r\n}","import { Big, BigSource } from 'big.js';\r\n\r\nexport default function roundBigValue(value: BigSource, precision: number = 4): string {\r\n    return new Big(value).round(precision).toString();\r\n}","import { HTMLProps } from 'react';\r\nimport { MeasurementUnitNames } from '../../types/measurement-unit';\r\n\r\ninterface ConverterUnitNameProps extends HTMLProps<HTMLSpanElement> {\r\n  names: MeasurementUnitNames;\r\n}\r\n\r\nfunction ConverterUnitName({ names, ...props }: ConverterUnitNameProps) {\r\n  return <span {...props}>{names?.short || names.full}</span>;\r\n}\r\n\r\nexport default ConverterUnitName;\r\n","interface ErrorProps<T extends Error> {\r\n  error: T;\r\n}\r\n\r\nfunction Error<T extends Error>({ error }: ErrorProps<T>) {\r\n  return (\r\n    <div className=\"my-3\">\r\n      Converting failed: <span className=\"text-danger\">{error.message}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","import { ConvertingResult as ConvertingResultType } from '../../types/converting-result';\r\nimport formatConvertingResult from '../../utils/formatConvertingResult';\r\nimport ConverterUnitName from '../ConverterUnitName';\r\nimport ConvertingError from '../../errors/converting-error';\r\nimport Error from '../Error';\r\n\r\ninterface ConvertingResultProps {\r\n  result: ConvertingResultType;\r\n}\r\n\r\nfunction ConvertingResult({ result }: ConvertingResultProps) {\r\n  if (result instanceof ConvertingError) {\r\n    return <Error error={result} />;\r\n  }\r\n\r\n  const formattedResult = formatConvertingResult(result.value);\r\n\r\n  return (\r\n    <div className=\"my-3\">\r\n      <span className=\"text-muted\">Result is: </span>\r\n      <span className=\"result__mantissa\">{formattedResult.value}</span>{' '}\r\n      {formattedResult?.exponent && (\r\n        <span className=\"result__exponent\">\r\n          x 10<sup>{formattedResult?.exponent}</sup>\r\n        </span>\r\n      )}{' '}\r\n      <ConverterUnitName\r\n        names={result.names}\r\n        className=\"result__unit-of-measurement\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConvertingResult;\r\n","import { Big } from 'big.js';\r\nimport { FormattedConvertingResult } from \"../types/converting-result\";\r\nimport roundBigValue from './roundBigValue';\r\n\r\nexport default function formatConvertingResult(value: Big): FormattedConvertingResult {\r\n    const EXPONENTIAL_FORMAT_LIMIT: number = 3;\r\n    const MANTISSA_DECIMAL_PRECISION: number = 10;\r\n\r\n    const [mantissa, exponent] = value.toExponential().split('e');\r\n    const exponentPower: number = Number(exponent);\r\n    if (Math.abs(exponentPower) <= EXPONENTIAL_FORMAT_LIMIT) {\r\n        const decimalPart: string | undefined = mantissa.split('.')[1];\r\n        if (!decimalPart) {\r\n            return { value: value.toString() };\r\n        }\r\n\r\n        const decimalValue: string = decimalPart.length > MANTISSA_DECIMAL_PRECISION\r\n            ? roundBigValue(value)\r\n            : value.toString();\r\n        return { value: decimalValue };\r\n    }\r\n\r\n    const roundedMantissa: string = roundBigValue(mantissa);\r\n    return {\r\n        value: roundedMantissa,\r\n        exponent: exponentPower\r\n    }\r\n}","import { useEffect } from 'react';\r\nimport Section from '../components/Section';\r\nimport ConverterForm from '../components/ConverterForm';\r\nimport ConvertingResult from '../components/ConvertingResult';\r\nimport { useConvertingResult } from '../context/ConvertingResultContext';\r\nimport { ConverterResponse } from '../types/measurement-unit';\r\n\r\ninterface ConverterPageProps {\r\n  converterName: string;\r\n  converterApiData: ConverterResponse;\r\n}\r\n\r\nfunction ConverterPage({\r\n  converterName,\r\n  converterApiData,\r\n}: ConverterPageProps) {\r\n  const { result, setResult } = useConvertingResult();\r\n\r\n  //clear result, when user opens another converter\r\n  useEffect(() => {\r\n    setResult(null);\r\n  }, [setResult]);\r\n\r\n  return (\r\n    <Section name={`${converterName} converter`}>\r\n      <ConverterForm converterData={converterApiData} />\r\n      {result && <ConvertingResult result={result} />}\r\n    </Section>\r\n  );\r\n}\r\n\r\nexport default ConverterPage;\r\n","import ConverterPage from './ConverterPage';\r\nimport volumeApiData from '../api/volume.json';\r\n\r\nfunction VolumePage() {\r\n  return (\r\n    <ConverterPage converterName=\"volume\" converterApiData={volumeApiData} />\r\n  );\r\n}\r\n\r\nexport default VolumePage;\r\n"],"names":["children","props","variant","className","name","Container","as","fluid","useConditionalTimeout","callback","delay","condition","timeoutRef","useRef","savedCallback","useEffect","current","setTimeout","clearTimeout","disabled","onClick","useState","rotating","setRotating","ICON_ROTATING_DURATION_MS","type","size","invalidMessage","Form","cloneElement","isInvalid","optionList","map","id","names","value","full","short","ConverterFormNames","groupsList","group","label","content","AMOUNT","required","min","message","FROM","TO","validate","equalFromAndTo","toValue","formValues","from","ConvertingError","Error","converterData","defaultValues","setResult","useConvertingResult","useForm","register","submitHandlerWrapper","handleSubmit","setValue","watch","errors","formState","groups","amountInputRegister","formConfig","fromSelectRegister","toSelectRegister","to","swapDisabled","Boolean","submitHandler","data","extractedData","formData","amount","fromId","toId","measurementUnits","reduce","result","fromUnit","find","unit","toUnit","extractMeasurementUnits","MeasurementUnitNotFound","bigAmount","Big","div","times","convert","onSubmit","placeholder","autoComplete","step","Button","roundBigValue","precision","round","toString","error","formattedResult","toExponential","split","mantissa","exponent","exponentPower","Number","Math","abs","decimalPart","length","formatConvertingResult","converterName","converterApiData","ConverterPage","volumeApiData"],"sourceRoot":""}